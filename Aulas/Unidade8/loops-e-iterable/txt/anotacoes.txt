Iterable
São objetos que possuem o método [Symbol.iterator], geralmente no protótipo, é dentro dele que função que lida com iteração será definida. Ex: Array, String, NodeList, boa parte das Array-Like e outros.

const frutas = ["Banana", "Maçã", "Laranja"];

Ao final do prototype é encontrado o (Symboil.iterator) caso tenha.

for...of
É possível fazermos um loop por cada iteração do objeto iterável utilizando o for...of. Além deste loop podemos também utilizar o Spread Operator nos mesmos.

for(const fruta of frutas){
  console.log(fruta);
}

Spread e for...of
Com o for loop podemos manipular cada um dos elementos do objeto iterável.

const buttons = document.querySelectorAll("button");

for(const btn of buttons){
  btn.style.background = "blue";
}
console.log(...buttons)

Apenas Iteráveis
O for...of não irá funcionar em um objeto comum que não seja iterável.

const carro = {
  marca: "Ford",
  modelo: "Ka",
  ano: 2018, 
}

// Erro, não é iterável
for(const item of carro){
  console.log(item);
}

for...in
Este loop irá retornar a chave (key) de todas as propriedades enumeráveis (que não sejam símbolos) de um objeto.

for(const item in carro){
  console.log(item)
}

Array e for...in

Uma array é um objeto, porém a chave de cada valor é igual ao seu index.

Chave e valor
Utilizando o for...in podemos retornar todas as chaves e valores de propriedades enumeráveis.

const btn = document.querySelector("button");
const btnStyles = getComputedStyle(btn);

for(const style in btnStyles){
  console.log(`${style}: ${btnStyles[style]}`);
}


Do / While
Outro tipo de loop é o Do / While. Não é muito utilizado.
let i = 0;

do{
  console.log(i++);
}while(i<=5);