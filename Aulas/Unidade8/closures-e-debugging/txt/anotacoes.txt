Closures e Debugging

Escopo
Quando criamos um função, a mesma possui acesso à todas as variáveis criadas em seu escopo e também ao eswcopo pai. A mesma coisa acontece para funções dentro de funções.

let item = 1;
function funcao1(){
  let item2 = 2;
  function funcao2(){
    let item3 = 3;
  }
  funcao2();
}

func1, possui acesso à item1 e item2
func2, possui acesso à item1, item2 e item3.

Clojures
A "funcao2" possui 4 escopos. O primeiro escopo é o Local, com acesso ao item3. O segundo escopo dá acesso ao item2, esse escopo é chamado de Clojure (funcao1)(escopo de função dentro de função). O terceiro escopo é o Script com acesso ao item1 e o quarto escopo é o Global/Window.

Debugging
É possível "debugarmos" um código JavaScript utilizando ferramentas do browser ou através do próprio VSCode. Se o código possuir qualquer Web API, o processo deve ser feito no Browser. Plugins podem interferir no debug dentro do browser.

Caso Clássico
Um dos casos mais clássicos para a demonstração de Clojures é através da criação de uma função de incremento. É como se a função incrementar carregasse uma mochila chamada contagem, onde uma referência para as suas variáveis estão na mesma.

function Contagem(){
  let total = 0;
  return function incrementar(){
    total++;
    console.log(total);
  }
}

const ativarIncremento = contagem(){
  ativarIncrementar(); // 1 
  ativarIncrementar(); // 2 
  ativarIncrementar(); // 3
}

Clojures na Real
Todas as funções internas da Factory Fuction possuem uma closure de $$. As mesmas contém um referência à variável elements declarada dentro do espoco da função.

function $$(selectedElements){
  const elements = document.querySelectorAll(selectedElements);
  
  function hide(){...}
  function show(){...}
  function on(){...}
  function addClass(){...}
  function removeClasse(){...}
  function hide(){...}

  ruturn{hide, show, on, addClass, removeClasse, hide}
}