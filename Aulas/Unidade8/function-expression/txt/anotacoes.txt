Function Declaration
São duas as formas mais comuns de declararmos uma função. A que utilizamos até o momento é chamado de Function Declaration.

Function Expression
É criada a partir da declaração de uma variável, na qual assinalamos uma função. Esta função pode ser anônima ou nomeada. A mesma poderá ser ativada através da variável assinalada.

Quando é declarado Function Expression, a execução deve ser definida após as linhas de código da função, tendo em vista que a função ainda não foi declarada pela ordem de execução do JavaScript

Hoisting
Function Declarations são completamente definidas no momento do hoisting, já function expressions apenas serão definidas no momento da execução. Por isso a ordem da declaração de uma FE possui importância.

somar(4,2); // 6
dividir(4,2); // Erro

function somar(a,b){
  return a + b;
}
const dividir = function(a,b){
  return a / b; 
}

Arrow Function 
Podemos criar utilizando arrow functions.
const subtrair = (a,b) => a - b;
subtrair(4,2); // 2

Estrutura / Preferência
Geralmente o uso entre expression / declaration é uma questão de preferência. Function Expression força a criação da mesma antes de sua ativação, o que pode contribuir para um código mais estruturado.

IIFE - Immediately Invoked Function Expression 
Antes da introdução de modules e da implementação do espoco de bloco, a forma mais comum utilizada para isolarmos o escopo de um códgio JavaScript era através das chamadas IIFE's.

var instrumento = "Violão";

(function(){
  // código isolado do escopo global
  var instrumento = "Guitarra"
})();

console.log(instrumento); // Violão

OU 

var instrumento = "Violão";

(() => {
  // código isolado do escopo global
  var instrumento = "Guitarra"
})();

console.log(instrumento); // Violão