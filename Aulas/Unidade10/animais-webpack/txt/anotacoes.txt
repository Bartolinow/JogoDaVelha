Webpack
Bundler
Agrupa / processa diversos arquivos e otimiza os mesmos.

Altamente configurável
Por isso é complexo.

https://webpack.js.org/

$ npm install --save-dev webpack webpack-cli 
Instala o web´pack e a cli do mesmo. Ter package.json antes.

$ npx webpack ./js/script.js -o ./main.js
Irá agrupar todo o código, otimizar e mais. Utilizar npx é a mesma coisa que utilizar node_modules/.bin/webpack. Facilita para utilizarmos cli's instaladas localmente ao invés de globalmente.

NPM Scripts
Permite definirmos una linha de comando inteira, que será ativada com npm run nomeScript. Não precisamos utilizar o npx aqui.

"scripts": {
    "build": "webpack --mode production ./js/script.js -o ./main.js --watch",
    "dev": "webpack --mode develplment ./js/script.js -o ./main.js --watch"
  },

--mode define o modo de compilação
--watch define se deve ficar observando alterações

Script Externos 
Podemos facilmente importar scripts externos instalando os mesmo através do NPM e utilizando o WebPack para fazer o bundler final.

$ npm install jquery
$ npm install lodash

import $ from "jquery";
import $ from "lodash";

Babel

Compilador
Transforma código novo em código antigo. Ex = cosnt nome = 'Andre'; vira var nome = 'Andre';.

Broser suporte
Para que um browser possa suportar algo novo de JavaScript é preciso que ele esteja atualizado, mas nem todo usuário possui a versão do browser instalada.

Can I Use
O site https://caniuse.com/ mostra em quais browsers a novidades está disponível ou não.

Polyfill
Cria métodos / funções com o mesmo nome das atuais, porém utilizando código antigo para permitir o uso em browsers que não possuem a API.

Transpiler
Transforma código novo em código antigo. Ou seja, transforma const em var.

Instalar Babel
https://babeljs.io/docs/en/usage

$ npm install --save-dev @babel/core @babel/preset-env @babel/plugin-transform-runtime babel-loader

Instala o babel, as configurações parões e o loader para o WebPack