Git
Sistema de controle de versões. Facilita o trabalho em equiep e o controle de mudanças entre arquivos e diretórios.

GitHub
Plataforma online de hospedagem para repositórios Git. Existem outras como GitLab e Bitbucket.

Instalar o git 
https://git-scm.com

Configurar Nome 
$ git config --global user.name "Seu nome"

Configurar Email
$ git config --global user.email "Seu email"

Inicia um repositório
$ git init

$ git add style.css
Adiciona um arquivo style.css ao index do git. Com o $git add -A , adicionamos todos os arquivos.

$ git status
Mostra as mudanças

$ git commit -m "Descricao"

Adicionar repositório remoto
$ git remote add origin 
https://github.com/seuusuario/seurepositorio.git

Push do primeiro commit
$ git push -u origin master

Branching
Branch
Umas das principais vantagens do git é a possibilidade de criarmos "ramificações. Assim podemos trabalhar em funcionalidades adicionais para um projeto, sem modificarmos o "ramificação principal, o master.

$ git brach nomeBranch
Toda vez que formos adicionar uma nova funcionalidade, devemos iniciar criando um novo branch ao invéz de fazermos alterações direto no master. O que for modificado no branch não afetará o master.

$ git checkout nomeBranch
Irá mudar de branch. Podemos usar o atalho:
$ git ckeckout -b novoBranch 
Assim, ele cria e muda de branch ao mesmo tempo. 

Procedimento de configuração de versões
Antes de commitar e enviar para a branch master, confira se nada foi alterado, para isso:
1 - Alterne para a branch master
$ git ckeckout master
2 - Execute o comando de atualização
$ git pull
** Lembre de commitar as alterações da branch
3 - Junte as branchs com o merge
$ git merge master
* Caso haja conflito o Visual Studio irá informar, e disponibilizar algumas opções selecionáveis nas linhas conflitadas.
4 - Delete a linha de conflito e deixe apenas a desejada.
5 - Dê o commit ta versão final.
$ git add . || $ git add -A
$ git commit -m "nome do commit"
$ git push
